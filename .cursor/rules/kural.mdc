---
description: 
globs: 
alwaysApply: true
---
# CNC Profil Büküm Makinesi - AI Agent Geliştirme Kuralları
Her adımdas machine_documentation.md dosyasında bağlı kal.
## Proje Genel Bilgileri
Bu proje 4 Vals Toplu CNC Tabanlı Profil Büküm makinesi kontrolü için geliştirilmektedir.
- Backend: C# .NET 8
- Frontend: Razor Pages
- Database: PostgreSQL (gelecekte eklenecek)
- Communication: Modbus TCP, SignalR
- Architecture: Clean Architecture + Driver Pattern
- Terminal komutları her zaman PowerShel uygun olacak.


## Geliştirme Kuralları

### 1. TEMEL MİMARİ KURALLARI
- Clean Architecture prensiplerini takip et
- SOLID prensiplerine uy
- Repository Pattern kullan
- Dependency Injection zorunlu
- Driver Layer (Agent-like) pattern kullan
- Asenkron programlama (async/await) tercih et

### 2. DOSYA YAPISINI KORU
```

├── BendingMachine.Web/              # Razor Pages UI
├── BendingMachine.Api/              # Web API Controllers
├── BendingMachine.Application/      # Business Logic & Services
├── BendingMachine.Domain/           # Entities, Interfaces, Enums
├── BendingMachine.Infrastructure/   # Data Access, External Services
└── BendingMachine.Driver/           # Machine Communication Layer
```

### 3. NAMING CONVENTIONS
- Namespace: BendingMachine.LayerName.SubFolder
- Classes: PascalCase (MachineDriverService)
- Interfaces: IPascalCase (IMachineDriverService)
- Methods: PascalCase + Async suffix for async methods
- Properties: PascalCase
- Fields: _camelCase (private), PascalCase (public)
- Constants: UPPER_SNAKE_CASE veya PascalCase
- Enums: PascalCase (enum ve değerleri)

### 4. DRIVER LAYER KURALLARI
- Driver katmanı makine ile sistem arasında Agent görevi görür
- Command Pattern kullan
- Interface: IMachineDriver
- Tüm makine iletişimi Driver üzerinden olacak
- Modbus TCP iletişimi Driver içinde kapsüllenecek
- Güvenlik kontrolleri Driver seviyesinde yapılacak

```csharp
// Driver Interface örneği
public interface IMachineDriver
{
    Task<bool> ConnectAsync();
    Task<bool> DisconnectAsync();
    Task<T> SendCommandAsync<T>(ICommand command);
    Task<SensorData> ReadSensorDataAsync();
    Task<bool> WriteSafetyOutputAsync(SafetyOutput output);
    event EventHandler<AlarmEventArgs> AlarmRaised;
}
```

### 5. MODBUS TCP KURALLARI
- Default IP: 192.168.1.100 (ayarlanabilir)
- Port: 502
- Timeout: 3000ms
- Retry: 3 kez
- Connection pool kullan
- Veri dönüşümleri doğru şekilde yap (mm, bar, %, derece)
- Modbus adresleri dokümantasyona uygun kullan

### 6. GÜVENLİK KURALLARI
- Sistem başlatmadan önce güvenlik kontrolleri yap
- Kritik hata durumlarında makineyi durdur
- Custom exception'lar kullan:
  - ModbusConnectionException
  - SafetyViolationException
  - SensorReadException
- Try-catch blokları async metodlarda zorunlu
- Güvenlik parametreleri ayarlanabilir olacak

### 7. API CONTROLLER KURALLARI
- [ApiController] attribute kullan
- Route: [Route("api/[controller]")]
- Async metodlar kullan
- DTO'lar kullan, Entity'leri direkt dönme
- ActionResult<T> kullan
- Model validation yap
- HTTP status kodlarını doğru kullan

```csharp
[ApiController]
[Route("api/[controller]")]
public class MachineController : ControllerBase
{
    [HttpGet("status")]
    public async Task<ActionResult<MachineStatusDto>> GetStatus()
    
    [HttpPost("command")]
    public async Task<ActionResult> SendCommand([FromBody] CommandDto command)
}
```

### 8. SIGNALR KURALLARI
- Hub sınıfı: Hub base class'ından türet
- Real-time data 100ms'de bir gönderilecek
- Group kullan: "MachineUsers"
- Connection yönetimi yap
- Error handling ekle

### 9. ENTITY VE MODEL KURALLARI
- BaseEntity kullan (Id, CreatedAt, UpdatedAt, CreatedBy, UpdatedBy)
- Entity'ler Domain katmanında
- DTO'lar Application katmanında
- Mapping için AutoMapper kullan
- Nullable properties dikkatli kullan

```csharp
public class BaseEntity
{
    public int Id { get; set; }
    public DateTime CreatedAt { get; set; }
    public DateTime UpdatedAt { get; set; }
    public string CreatedBy { get; set; }
    public string UpdatedBy { get; set; }
}
```

### 10. SERVİS KATMANI KURALLARI
- Interface ve implementation ayrı
- Services Application katmanında
- Business logic burada olacak
- Repository'leri kullan
- Validation yap
- Logging ekle

### 11. VALIDATION KURALLARI
- FluentValidation kullan
- DTO'lar için validator'lar yaz
- Makine güvenlik parametrelerini validate et
- Custom validation rules yaz

```csharp
public class BendingRequestValidator : AbstractValidator<BendingRequest>
{
    public BendingRequestValidator()
    {
        RuleFor(x => x.ProfileLength)
            .GreaterThan(0)
            .WithMessage("Profile length must be greater than 0");
    }
}
```

### 12. LOGGING KURALLARI
- Structured logging kullan
- Log levels: Information, Warning, Error, Critical
- Sensitive data loglama
- Performance kritik yerlerinde log at
- Exception'ları detaylı logla

```csharp
_logger.LogInformation("Machine command executed: {CommandType} with parameters {Parameters}", 
    command.Type, command.Parameters);
```

### 13. CONFIGURATION KURALLARI
- appsettings.json kullan
- Environment'a göre config
- Sensitive data için User Secrets veya Environment Variables
- Modbus ayarları configurable
- Makine parametreleri ayarlanabilir

### 14. ERROR HANDLING KURALLARI
- Global exception handling middleware
- Custom exception types
- User-friendly error messages
- Critical error'larda makine güvenliği
- Retry logic implement et

### 15. UI (RAZOR PAGES) KURALLARI
- UI tarafında sadece API ve SignalR kullan
- Hesaplama backend'de olacak
- Responsive design
- Real-time updates (SignalR)
- Form validation
- Loading states göster

### 16. DEPENDENCY INJECTION KURALLARI
- Built-in DI container kullan
- Scoped, Singleton, Transient dikkatli seç
- Interface-based registration
- Configuration binding

### 17. ASYNC/AWAIT KURALLARI
- IO operations async olacak
- ConfigureAwait(false) kullan library kodlarında
- Async all the way
- CancellationToken kullan uzun işlemlerde

### 18. PERFORMANCE KURALLARI
- Database queries optimize et
- Caching strategies uygula
- Connection pooling
- Batch operations
- Memory leaks'e dikkat et

### 19. SECURITY KURALLARI
- Authentication/Authorization
- Input validation
- SQL injection prevention
- XSS prevention
- HTTPS only
- Secure headers

### 20. TESTING KURALLARI
- Unit tests yaz
- Integration tests
- Mock dependencies
- Test coverage hedefle
- Arrange-Act-Assert pattern

### 21. ÖZEL GEREKSINIMLER
- Vals topu konfigürasyonları statik olmasın
- Stage sistemi (0mm, 60mm, 120mm) implement et
- Sensör verileri doğru convert et
- Güvenlik kontrolleri sistem başlatmada zorunlu
- Driver layer agent gibi davransın
- Extensible olsun (yeni sensör ekleme)

### 22. KAÇINILMASI GEREKENLER
- Entity'leri direkt API'den dönme
- Synchronous code kullanma
- Magic numbers/strings
- Global state
- Tight coupling
- God classes
- Hardcoded values

### 23. PROJE YAPISINA UYGUN DEVELOPMENT
- Feature'lar branch'lerde geliştir
- Atomic commits
- Meaningful commit messages
- Code review süreci
- Documentation güncelle

### 24. MAKINE SPESİFİK KURALLAR
- 4 vals topu: 1 üst (sıkıştırma), 1 alt orta (referans), 2 yan (büküm)
- Modbus TCP üzerinden haberleşim
- 100ms real-time updates
- Safety-first approach
- Configurable parameters
- Stage-based operations









Bu kuralları takip ederek kod geliştir. Herhangi bir kural ihlali durumunda uyar ve doğru yolu göster.