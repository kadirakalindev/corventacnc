namespace Core.Converters;

/// <summary>
/// Makine komutları ve ölçümleri için birim dönüşümleri yapan sınıf
/// </summary>
public static class UnitConverter
{
    // Sabitler
    private const double min_mA = 4.0;
    private const double max_mA = 20.0;
    private const int registerCount = 4095;
    private const int pulseCount = 1024;

    #region Register-Voltage Dönüşümleri
    
    // Register değeri: 61
    // Min Register: -2048
    // Max Register: 2047
    // Min Voltage: -10V
    // Max Voltage: 10V
    
    /// <summary>
    /// Register değerini voltaja dönüştürür
    /// </summary>
    /// <param name="registerValue">Register değeri</param>
    /// <returns>Voltaj değeri (-10V ile 10V arası)</returns>
    public static double RegisterToVoltage(int registerValue)
    {
        const double minRegister = -2048;
        const double maxRegister = 2047;
        const double minVoltage = -10.0;
        const double maxVoltage = 10.0;
        
        // Formül: voltage = (registerValue - minRegister) / (maxRegister - minRegister) * (maxVoltage - minVoltage) + minVoltage
        double voltage = Math.Round(((registerValue - minRegister) / (maxRegister - minRegister)) * (maxVoltage - minVoltage) + minVoltage, 1);
        return voltage;
    }
    
    /// <summary>
    /// Voltaj değerini register değerine dönüştürür
    /// </summary>
    /// <param name="voltage">Voltaj değeri (-10V ile 10V arası)</param>
    /// <returns>Register değeri (-2048 ile 2047 arası)</returns>
    public static int VoltageToRegister(double voltage)
    {
        const double minRegister = -2048;
        const double maxRegister = 2047;
        const double minVoltage = -10.0;
        const double maxVoltage = 10.0;
        
        // Formül: registerValue = (voltage - minVoltage) / (maxVoltage - minVoltage) * (maxRegister - minRegister) + minRegister
        // Örnek: 0.5V için 101.88 register değeri (tablodaki örnek)
        double result = Math.Round(((voltage - minVoltage) / (maxVoltage - minVoltage)) * (maxRegister - minRegister) + minRegister, 0);
        return Convert.ToInt32(Math.Clamp(result, minRegister, maxRegister));
    }
    
    #endregion
    
    #region Register-mA Dönüşümleri
    
    /// <summary>
    /// Register değerini miliamper değerine dönüştürür
    /// </summary>
    /// <param name="registerValue">Register değeri</param>
    /// <returns>mA değeri (4-20mA arası)</returns>
    public static double RegisterToMilliamps(int registerValue)
    {
        // Formül: mA = registerValue / registerCount * (maxMilliamps - minMilliamps) + minMilliamps
        double mA = Math.Round((double)registerValue / registerCount * (max_mA - min_mA) + min_mA, 2);
        return Math.Clamp(mA, min_mA, max_mA);
    }
    
    /// <summary>
    /// Register değerini miliamper üzerinden cm/sn değerine dönüştürür (Akış sensörleri için)
    /// </summary>
    /// <param name="registerValue">Register değeri</param>
    /// <returns>cm/sn değeri (0-297 cm/sn arası)</returns>
    public static double RegisterToMilliampsToCmPerSecond(int registerValue)
    {
        // Akış hızı dönüşümü için değerler
        const double min_flowSpeed = 0; // cm/sn
        const double max_flowSpeed = 297; // cm/sn
        
        // Önce mA değerine dönüştür
        double mA = RegisterToMilliamps(registerValue);
        
        // Eğim hesapla
        double slope = (max_flowSpeed - min_flowSpeed) / (max_mA - min_mA); // cm/s / mA
        
        // Lineer dönüşüm formülü
        double flowRate = Math.Round(slope * (mA - min_mA) + min_flowSpeed, 1);
        return Math.Clamp(flowRate, min_flowSpeed, max_flowSpeed);
    }
    
    /// <summary>
    /// Register değerini miliamper üzerinden sıcaklık değerine dönüştürür (Yağ sıcaklık sensörü için)
    /// </summary>
    /// <param name="registerValue">Register değeri</param>
    /// <returns>Sıcaklık değeri (-20°C ile 120°C arası)</returns>
    public static double RegisterToMilliampsToTemperature(int registerValue)
    {
        // Sıcaklık dönüşümü için değerler
        const double min_C = -20.0; // °C
        const double max_C = 120.0; // °C
        
        // Önce mA değerine dönüştür
        double mA = RegisterToMilliamps(registerValue);
        
        // Eğim hesapla
        double slope = (max_C - min_C) / (max_mA - min_mA); // °C / mA
        
        // Lineer dönüşüm formülü
        double temperature = Math.Round(slope * (mA - min_mA) + min_C, 1);
        return Math.Clamp(temperature, min_C, max_C);
    }
    
    /// <summary>
    /// Register değerini miliamper üzerinden nem yüzdesine dönüştürür
    /// </summary>
    /// <param name="registerValue">Register değeri</param>
    /// <returns>Nem değeri (% 0-100 arası)</returns>
    public static double RegisterToHumidity(int registerValue)
    {
        // Nem dönüşümü için değerler
        const double min_Moisture = 0; // %
        const double max_Moisture = 100; // %
        
        // Önce mA değerine dönüştür
        double mA = RegisterToMilliamps(registerValue);
        
        // Eğim hesapla
        double slope = (max_Moisture - min_Moisture) / (max_mA - min_mA); // % / mA
        
        // Lineer dönüşüm formülü
        double humidity = Math.Round(slope * (mA - min_mA) + min_Moisture, 1);
        return Math.Clamp(humidity, min_Moisture, max_Moisture);
    }
    
    /// <summary>
    /// mA değerini register değerine dönüştürür
    /// </summary>
    /// <param name="milliamps">mA değeri (4-20mA arası)</param>
    /// <returns>Register değeri (0-4095 arası)</returns>
    public static int MilliampsToRegister(double milliamps)
    {
        // Formül: registerValue = (milliamps - minMilliamps) / (maxMilliamps - minMilliamps) * registerCount
        // Örnek: 6.34mA için 600 register değeri (tablodaki örnek)
        var result = (int)((milliamps - min_mA) / (max_mA - min_mA) * registerCount);
        return Math.Clamp(result, 0, registerCount - 1);
    }
    
    #endregion
    
    #region Register-Percentage Dönüşümleri
    
    /// <summary>
    /// Register değerini yüzde değerine dönüştürür
    /// </summary>
    /// <param name="registerValue">Register değeri</param>
    /// <param name="registerCount">Register sayısı (varsayılan: 4096)</param>
    /// <returns>Yüzde değeri (0-100 arası)</returns>
    public static double RegisterToPercentage(int registerValue, int registerCount = 4096)
    {
        // Formül: percentage = (registerValue / registerCount) * 100
        double percentage = ((double)registerValue / registerCount) * 100.0;
        return Math.Clamp(percentage, 0.0, 100.0);
    }
    
    /// <summary>
    /// Yüzde değerini register değerine dönüştürür
    /// </summary>
    /// <param name="percentage">Yüzde değeri (0-100 arası)</param>
    /// <param name="registerCount">Register sayısı (varsayılan: 4096)</param>
    /// <returns>Register değeri (0-registerCount arası)</returns>
    public static int PercentageToRegister(double percentage, int registerCount = 4096)
    {
        // Yüzdeyi sınırla
        percentage = Math.Clamp(percentage, 0.0, 100.0);
        
        // Formül: registerValue = (percentage / 100) * registerCount
        var result = (int)((percentage / 100.0) * registerCount);
        return Math.Clamp(result, 0, registerCount - 1);
    }
    
    #endregion
    
    #region Register-Millimetre Dönüşümleri
    
    // Register türüne bağlı olarak millimetre dönüşümleri
    
    /// <summary>
    /// Register değerini millimetre değerine dönüştürür (RV3100 Register To mm)
    /// </summary>
    /// <param name="registerValue">Register değeri</param>
    /// <param name="ballDiameter">Top çapı (varsayılan: 220mm)</param>
    /// <param name="pulsCount">Puls sayısı (varsayılan: 1024)</param>
    /// <returns>Millimetre değeri</returns>
    public static double RV3100RegisterToMillimeter(int registerValue, double ballDiameter = 220.0, int pulsCount = 1024)
    {
        double perimeterDistance = ballDiameter * Math.PI; //Top çevre uzunluğu
        double mm = registerValue * perimeterDistance / pulsCount;
        return Math.Round(mm, 2);
    }
    
    /// <summary>
    /// Millimetre değerini register değerine dönüştürür (RV3100 mm To Register)
    /// </summary>
    /// <param name="millimeters">Millimetre değeri</param>
    /// <param name="ballDiameter">Top çapı (varsayılan: 220mm)</param>
    /// <param name="pulsCount">Puls sayısı (varsayılan: 1024)</param>
    /// <returns>Register değeri</returns>
    public static int MillimeterToRV3100Register(double millimeters, double ballDiameter = 220.0, int pulsCount = 1024)
    {
        double perimeterDistance = ballDiameter * Math.PI; //Top çevre uzunluğu
        int register = Convert.ToInt32(Math.Round(millimeters * pulsCount / perimeterDistance));
        return register;
    }
    
    /// <summary>
    /// Register değerini millimetre değerine dönüştürür (Register To mm)
    /// </summary>
    /// <param name="registerValue">Register değeri</param>
    /// <param name="registerCount">Register sayısı (varsayılan: 21085)</param>
    /// <param name="strokeLength">Strok uzunluğu (varsayılan: 422mm)</param>
    /// <returns>Millimetre değeri</returns>
    public static double RegisterToMillimeter(int registerValue, int registerCount = 21085, double strokeLength = 422.0)
    {
        double mm = registerValue * strokeLength / registerCount;
        return Math.Round(mm, 2);
    }
    
    /// <summary>
    /// Millimetre değerini register değerine dönüştürür (mm To Register)
    /// </summary>
    /// <param name="millimeters">Millimetre değeri</param>
    /// <param name="registerCount">Register sayısı (varsayılan: 21085)</param>
    /// <param name="strokeLength">Strok uzunluğu (varsayılan: 422mm)</param>
    /// <returns>Register değeri</returns>
    public static int MillimeterToRegister(double millimeters, int registerCount = 21085, double strokeLength = 422.0)
    {
        int register = Convert.ToInt32(Math.Round(millimeters * registerCount / strokeLength));
        return register;
    }
    
    #endregion
    
    #region Register-Bar Dönüşümleri
    
    /// <summary>
    /// Register değerini bar ve miliamper değerine dönüştürür
    /// </summary>
    /// <param name="registerValue">Register değeri</param>
    /// <param name="registerCount">Register sayısı (varsayılan: 4096)</param>
    /// <param name="minMilliamps">Minimum mA değeri (varsayılan: 4mA)</param>
    /// <param name="maxMilliamps">Maximum mA değeri (varsayılan: 20mA)</param>
    /// <param name="minBar">Minimum bar değeri (varsayılan: 0 bar)</param>
    /// <param name="maxBar">Maximum bar değeri (varsayılan: 250 bar)</param>
    /// <returns>Bar ve mA değerini içeren tuple</returns>
    public static (double Bar, double Milliamps) RegisterToBarAndMilliamps(int registerValue, int registerCount = 4096, 
        double minMilliamps = 4.0, double maxMilliamps = 20.0, double minBar = 0.0, double maxBar = 250.0)
    {
        // mA değerini hesapla
        double mA = RegisterToMilliamps(registerValue);
        
        // Basınç değerini hesapla
        // Tablodaki örnekte: register=1061, maxBar=250, mA=8.14, slope=15.63, bar=64.76
        double slope = (maxBar - minBar) / (maxMilliamps - minMilliamps);
        double bar = Math.Round((mA - minMilliamps) * slope + minBar, 1);
        
        return (bar, mA);
    }
    
    /// <summary>
    /// Bar değerini register değerine dönüştürür
    /// </summary>
    /// <param name="bar">Bar değeri</param>
    /// <param name="registerCount">Register sayısı (varsayılan: 4096)</param>
    /// <param name="minMilliamps">Minimum mA değeri (varsayılan: 4mA)</param>
    /// <param name="maxMilliamps">Maximum mA değeri (varsayılan: 20mA)</param>
    /// <param name="minBar">Minimum bar değeri (varsayılan: 0 bar)</param>
    /// <param name="maxBar">Maximum bar değeri (varsayılan: 250 bar)</param>
    /// <returns>Register değeri</returns>
    public static int BarToRegister(double bar, int registerCount = 4096, 
        double minMilliamps = 4.0, double maxMilliamps = 20.0, double minBar = 0.0, double maxBar = 250.0)
    {
        // Bar değerinden mA değerini hesapla
        double slope = (maxMilliamps - minMilliamps) / (maxBar - minBar);
        double mA = (bar - minBar) * slope + minMilliamps;
        
        // mA değerinden register değerini hesapla
        int register = (int)((mA - minMilliamps) * registerCount / (maxMilliamps - minMilliamps));
        
        return Math.Clamp(register, 0, registerCount - 1);
    }
    
    #endregion
    
    #region Mikron-Millimetre Dönüşümü
    
    /// <summary>
    /// Mikron değerini millimetre değerine dönüştürür
    /// </summary>
    /// <param name="microns">Mikron değeri</param>
    /// <returns>Millimetre değeri</returns>
    public static double MicronToMillimeter(double microns)
    {
        // 1 mikron = 0.001 mm
        // Tablodaki örnekte: 2.5 mikron = 0.0025 mm
        return microns * 0.001;
    }
    
    /// <summary>
    /// Millimetre değerini mikron değerine dönüştürür
    /// </summary>
    /// <param name="millimeters">Millimetre değeri</param>
    /// <returns>Mikron değeri</returns>
    public static double MillimeterToMicron(double millimeters)
    {
        // 1 mm = 1000 mikron
        return millimeters * 1000;
    }
    
    #endregion

    #region RulerParameters Kullanarak Dönüşümler
    
    /// <summary>
    /// RulerConstants sınıfını kullanarak register değerini mm cinsine çevirir
    /// </summary>
    /// <param name="registerValue">Register değeri</param>
    /// <param name="rulerType">Cetvel türü (örn: "LeftPiston", "TopPiston", vb.)</param>
    /// <returns>mm cinsinden konum</returns>
    public static double RegisterToMillimeterUsingConstants(int registerValue, string rulerType)
    {
        switch (rulerType)
        {
            // Ana pistonlar
            case "LeftPiston":
                return Constants.RulerConstants.LeftPiston.RegisterToPosition(registerValue);
            case "RightPiston":
                return Constants.RulerConstants.RightPiston.RegisterToPosition(registerValue);
            case "TopPiston":
                return Constants.RulerConstants.TopPiston.RegisterToPosition(registerValue);
            case "BottomPiston":
                return Constants.RulerConstants.BottomPiston.RegisterToPosition(registerValue);
            
            // Yan dayama grubu
            case "LeftReelPiston":
                return Constants.RulerConstants.LeftReelPiston.RegisterToPosition(registerValue);
            case "RightReelPiston":
                return Constants.RulerConstants.RightReelPiston.RegisterToPosition(registerValue);
            case "LeftBody":
                return Constants.RulerConstants.LeftBody.RegisterToPosition(registerValue);
            case "RightBody":
                return Constants.RulerConstants.RightBody.RegisterToPosition(registerValue);
            case "LeftJoinPiston":
                return Constants.RulerConstants.LeftJoinPiston.RegisterToPosition(registerValue);
            case "RightJoinPiston":
                return Constants.RulerConstants.RightJoinPiston.RegisterToPosition(registerValue);
            
            // Pnömatik valfler
            case "LeftPneumaticValve":
                return Constants.RulerConstants.LeftPneumaticValve.RegisterToPosition(registerValue);
            case "RightPneumaticValve":
                return Constants.RulerConstants.RightPneumaticValve.RegisterToPosition(registerValue);
            
            // Rotasyon
            case "Rotation":
                return Constants.RulerConstants.RotationRuler.RegisterToPosition(registerValue);
            
            default:
                throw new ArgumentException($"Geçersiz cetvel türü: {rulerType}");
        }
    }

    /// <summary>
    /// RulerConstants sınıfını kullanarak mm cinsinden konumu register değerine çevirir
    /// </summary>
    /// <param name="position">mm cinsinden konum</param>
    /// <param name="rulerType">Cetvel türü (örn: "LeftPiston", "TopPiston", vb.)</param>
    /// <returns>Register değeri</returns>
    public static int MillimeterToRegisterUsingConstants(double position, string rulerType)
    {
        switch (rulerType)
        {
            // Ana pistonlar
            case "LeftPiston":
                return Constants.RulerConstants.LeftPiston.PositionToRegister(position);
            case "RightPiston":
                return Constants.RulerConstants.RightPiston.PositionToRegister(position);
            case "TopPiston":
                return Constants.RulerConstants.TopPiston.PositionToRegister(position);
            case "BottomPiston":
                return Constants.RulerConstants.BottomPiston.PositionToRegister(position);
            
            // Yan dayama grubu
            case "LeftReelPiston":
                return Constants.RulerConstants.LeftReelPiston.PositionToRegister(position);
            case "RightReelPiston":
                return Constants.RulerConstants.RightReelPiston.PositionToRegister(position);
            case "LeftBody":
                return Constants.RulerConstants.LeftBody.PositionToRegister(position);
            case "RightBody":
                return Constants.RulerConstants.RightBody.PositionToRegister(position);
            case "LeftJoinPiston":
                return Constants.RulerConstants.LeftJoinPiston.PositionToRegister(position);
            case "RightJoinPiston":
                return Constants.RulerConstants.RightJoinPiston.PositionToRegister(position);
            
            // Pnömatik valfler
            case "LeftPneumaticValve":
                return Constants.RulerConstants.LeftPneumaticValve.PositionToRegister(position);
            case "RightPneumaticValve":
                return Constants.RulerConstants.RightPneumaticValve.PositionToRegister(position);
            
            // Rotasyon
            case "Rotation":
                return Constants.RulerConstants.RotationRuler.PositionToRegister(position);
            
            default:
                throw new ArgumentException($"Geçersiz cetvel türü: {rulerType}");
        }
    }
    
    #endregion
} 